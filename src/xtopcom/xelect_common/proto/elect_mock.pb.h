// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elect_mock.proto

#ifndef PROTOBUF_INCLUDED_elect_5fmock_2eproto
#define PROTOBUF_INCLUDED_elect_5fmock_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_elect_5fmock_2eproto 

namespace protobuf_elect_5fmock_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_elect_5fmock_2eproto
namespace top {
namespace elect {
namespace pb {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class ReportNode;
class ReportNodeDefaultTypeInternal;
extern ReportNodeDefaultTypeInternal _ReportNode_default_instance_;
}  // namespace pb
}  // namespace elect
}  // namespace top
namespace google {
namespace protobuf {
template<> ::top::elect::pb::Node* Arena::CreateMaybeMessage<::top::elect::pb::Node>(Arena*);
template<> ::top::elect::pb::ReportNode* Arena::CreateMaybeMessage<::top::elect::pb::ReportNode>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace top {
namespace elect {
namespace pb {

// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.elect.pb.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(NULL);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string node_type = 10;
  bool has_node_type() const;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 10;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // optional string account = 11;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 11;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional uint32 netowrk_id = 1;
  bool has_netowrk_id() const;
  void clear_netowrk_id();
  static const int kNetowrkIdFieldNumber = 1;
  ::google::protobuf::uint32 netowrk_id() const;
  void set_netowrk_id(::google::protobuf::uint32 value);

  // optional int32 zone_id = 2;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  ::google::protobuf::int32 zone_id() const;
  void set_zone_id(::google::protobuf::int32 value);

  // optional int32 cluster_id = 3;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  ::google::protobuf::int32 cluster_id() const;
  void set_cluster_id(::google::protobuf::int32 value);

  // optional int32 group_id = 4;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // optional int32 slot_id = 5;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 5;
  ::google::protobuf::int32 slot_id() const;
  void set_slot_id(::google::protobuf::int32 value);

  // optional uint64 version = 20;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 20;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional int64 time_updated = 21;
  bool has_time_updated() const;
  void clear_time_updated();
  static const int kTimeUpdatedFieldNumber = 21;
  ::google::protobuf::int64 time_updated() const;
  void set_time_updated(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:top.elect.pb.Node)
 private:
  void set_has_netowrk_id();
  void clear_has_netowrk_id();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_cluster_id();
  void clear_has_cluster_id();
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_slot_id();
  void clear_has_slot_id();
  void set_has_node_type();
  void clear_has_node_type();
  void set_has_account();
  void clear_has_account();
  void set_has_version();
  void clear_has_version();
  void set_has_time_updated();
  void clear_has_time_updated();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint32 netowrk_id_;
  ::google::protobuf::int32 zone_id_;
  ::google::protobuf::int32 cluster_id_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 slot_id_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::int64 time_updated_;
  friend struct ::protobuf_elect_5fmock_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.elect.pb.ReportNode) */ {
 public:
  ReportNode();
  virtual ~ReportNode();

  ReportNode(const ReportNode& from);

  inline ReportNode& operator=(const ReportNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportNode(ReportNode&& from) noexcept
    : ReportNode() {
    *this = ::std::move(from);
  }

  inline ReportNode& operator=(ReportNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportNode* internal_default_instance() {
    return reinterpret_cast<const ReportNode*>(
               &_ReportNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReportNode* other);
  friend void swap(ReportNode& a, ReportNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportNode* New() const final {
    return CreateMaybeMessage<ReportNode>(NULL);
  }

  ReportNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportNode& from);
  void MergeFrom(const ReportNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 versions = 2;
  int versions_size() const;
  void clear_versions();
  static const int kVersionsFieldNumber = 2;
  ::google::protobuf::uint64 versions(int index) const;
  void set_versions(int index, ::google::protobuf::uint64 value);
  void add_versions(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      versions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_versions();

  // optional .top.elect.pb.Node address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  private:
  const ::top::elect::pb::Node& _internal_address() const;
  public:
  const ::top::elect::pb::Node& address() const;
  ::top::elect::pb::Node* release_address();
  ::top::elect::pb::Node* mutable_address();
  void set_allocated_address(::top::elect::pb::Node* address);

  // @@protoc_insertion_point(class_scope:top.elect.pb.ReportNode)
 private:
  void set_has_address();
  void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > versions_;
  ::top::elect::pb::Node* address_;
  friend struct ::protobuf_elect_5fmock_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// optional uint32 netowrk_id = 1;
inline bool Node::has_netowrk_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_netowrk_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_netowrk_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_netowrk_id() {
  netowrk_id_ = 0u;
  clear_has_netowrk_id();
}
inline ::google::protobuf::uint32 Node::netowrk_id() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.netowrk_id)
  return netowrk_id_;
}
inline void Node::set_netowrk_id(::google::protobuf::uint32 value) {
  set_has_netowrk_id();
  netowrk_id_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.netowrk_id)
}

// optional int32 zone_id = 2;
inline bool Node::has_zone_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_zone_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_zone_id() {
  zone_id_ = 0;
  clear_has_zone_id();
}
inline ::google::protobuf::int32 Node::zone_id() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.zone_id)
  return zone_id_;
}
inline void Node::set_zone_id(::google::protobuf::int32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.zone_id)
}

// optional int32 cluster_id = 3;
inline bool Node::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_cluster_id() {
  cluster_id_ = 0;
  clear_has_cluster_id();
}
inline ::google::protobuf::int32 Node::cluster_id() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.cluster_id)
  return cluster_id_;
}
inline void Node::set_cluster_id(::google::protobuf::int32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.cluster_id)
}

// optional int32 group_id = 4;
inline bool Node::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 Node::group_id() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.group_id)
  return group_id_;
}
inline void Node::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.group_id)
}

// optional int32 slot_id = 5;
inline bool Node::has_slot_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_slot_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_slot_id() {
  slot_id_ = 0;
  clear_has_slot_id();
}
inline ::google::protobuf::int32 Node::slot_id() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.slot_id)
  return slot_id_;
}
inline void Node::set_slot_id(::google::protobuf::int32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.slot_id)
}

// optional string node_type = 10;
inline bool Node::has_node_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_node_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_node_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_type();
}
inline const ::std::string& Node::node_type() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.node_type)
  return node_type_.GetNoArena();
}
inline void Node::set_node_type(const ::std::string& value) {
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.node_type)
}
#if LANG_CXX11
inline void Node::set_node_type(::std::string&& value) {
  set_has_node_type();
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.elect.pb.Node.node_type)
}
#endif
inline void Node::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.elect.pb.Node.node_type)
}
inline void Node::set_node_type(const char* value, size_t size) {
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.elect.pb.Node.node_type)
}
inline ::std::string* Node::mutable_node_type() {
  set_has_node_type();
  // @@protoc_insertion_point(field_mutable:top.elect.pb.Node.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_node_type() {
  // @@protoc_insertion_point(field_release:top.elect.pb.Node.node_type)
  if (!has_node_type()) {
    return NULL;
  }
  clear_has_node_type();
  return node_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    set_has_node_type();
  } else {
    clear_has_node_type();
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:top.elect.pb.Node.node_type)
}

// optional string account = 11;
inline bool Node::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& Node::account() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.account)
  return account_.GetNoArena();
}
inline void Node::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.account)
}
#if LANG_CXX11
inline void Node::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.elect.pb.Node.account)
}
#endif
inline void Node::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.elect.pb.Node.account)
}
inline void Node::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.elect.pb.Node.account)
}
inline ::std::string* Node::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:top.elect.pb.Node.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_account() {
  // @@protoc_insertion_point(field_release:top.elect.pb.Node.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:top.elect.pb.Node.account)
}

// optional uint64 version = 20;
inline bool Node::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Node::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Node::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Node::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 Node::version() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.version)
  return version_;
}
inline void Node::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.version)
}

// optional int64 time_updated = 21;
inline bool Node::has_time_updated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Node::set_has_time_updated() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Node::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Node::clear_time_updated() {
  time_updated_ = GOOGLE_LONGLONG(0);
  clear_has_time_updated();
}
inline ::google::protobuf::int64 Node::time_updated() const {
  // @@protoc_insertion_point(field_get:top.elect.pb.Node.time_updated)
  return time_updated_;
}
inline void Node::set_time_updated(::google::protobuf::int64 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:top.elect.pb.Node.time_updated)
}

// -------------------------------------------------------------------

// ReportNode

// optional .top.elect.pb.Node address = 1;
inline bool ReportNode::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportNode::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportNode::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportNode::clear_address() {
  if (address_ != NULL) address_->Clear();
  clear_has_address();
}
inline const ::top::elect::pb::Node& ReportNode::_internal_address() const {
  return *address_;
}
inline const ::top::elect::pb::Node& ReportNode::address() const {
  const ::top::elect::pb::Node* p = address_;
  // @@protoc_insertion_point(field_get:top.elect.pb.ReportNode.address)
  return p != NULL ? *p : *reinterpret_cast<const ::top::elect::pb::Node*>(
      &::top::elect::pb::_Node_default_instance_);
}
inline ::top::elect::pb::Node* ReportNode::release_address() {
  // @@protoc_insertion_point(field_release:top.elect.pb.ReportNode.address)
  clear_has_address();
  ::top::elect::pb::Node* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::top::elect::pb::Node* ReportNode::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::top::elect::pb::Node>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:top.elect.pb.ReportNode.address)
  return address_;
}
inline void ReportNode::set_allocated_address(::top::elect::pb::Node* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    set_has_address();
  } else {
    clear_has_address();
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:top.elect.pb.ReportNode.address)
}

// repeated uint64 versions = 2;
inline int ReportNode::versions_size() const {
  return versions_.size();
}
inline void ReportNode::clear_versions() {
  versions_.Clear();
}
inline ::google::protobuf::uint64 ReportNode::versions(int index) const {
  // @@protoc_insertion_point(field_get:top.elect.pb.ReportNode.versions)
  return versions_.Get(index);
}
inline void ReportNode::set_versions(int index, ::google::protobuf::uint64 value) {
  versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:top.elect.pb.ReportNode.versions)
}
inline void ReportNode::add_versions(::google::protobuf::uint64 value) {
  versions_.Add(value);
  // @@protoc_insertion_point(field_add:top.elect.pb.ReportNode.versions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReportNode::versions() const {
  // @@protoc_insertion_point(field_list:top.elect.pb.ReportNode.versions)
  return versions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReportNode::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:top.elect.pb.ReportNode.versions)
  return &versions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace elect
}  // namespace top

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_elect_5fmock_2eproto
